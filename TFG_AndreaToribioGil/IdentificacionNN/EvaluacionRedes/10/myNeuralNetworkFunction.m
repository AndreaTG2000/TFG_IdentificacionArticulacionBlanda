function [Y,Xf,Af] = myNeuralNetworkFunction(X,~,~)
%MYNEURALNETWORKFUNCTION neural network simulation function.
%
% Auto-generated by MATLAB, 01-May-2022 20:54:41.
%
% [Y] = myNeuralNetworkFunction(X,~,~) takes these arguments:
%
%   X = 1xTS cell, 1 inputs over TS timesteps
%   Each X{1,ts} = 2xQ matrix, input #1 at timestep ts.
%
% and returns:
%   Y = 1xTS cell of 1 outputs over TS timesteps.
%   Each Y{1,ts} = 3xQ matrix, output #1 at timestep ts.
%
% where Q is number of samples (or series) and TS is the number of timesteps.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = [-46.2893467388983;-43.8157806032881];
x1_step1.gain = [0.0235714035168697;0.0222243012218279];
x1_step1.ymin = -1;

% Layer 1
b1 = [-5.2418318013578701908;-9.2937364999690288414;5.1128818024210520576;-2.4424917316481620233;6.3613284921407746708;-20.398040866200584986;-3.098235247651449864;4.6174264782093379367;-1.1184354067049568915;1.4150416329147379457;1.2655771239431290454;-2.713364280176138621;-1.7353452405723892582;-6.5795243957461000406;-0.23103184911921709199;-0.57573691303725993418;-2.706917118422873525;-1.8694084166755202681;4.7290595327231308431;2.2593431790256088831;1.7539282332836596545;4.8428850757696570994;12.805634054569988933;6.5073626878683956676;-6.0554231903754320854;-7.4044936775121881212;-24.455440438405922521;-6.9564188663810968549;7.3035621141223838748;-3.2729539180449633839];
IW1_1 = [0.47677709147565044967 5.1982249058221245974;5.1922140308362036976 -7.6985873916764715474;-4.4469418193533520878 4.8092903292673412352;1.9540926058202781057 -2.2006002235387840393;-10.32855964068600052 -3.1787656180485210911;25.660921777773744168 26.826442338233810858;3.6846427157444989753 -4.0454881279099552671;-0.28042862626631570588 -8.1869628154978908441;-0.036438433121099379763 5.9340323030923736169;0.32729809398094034112 -6.9257757895445566376;-0.67558002748331813514 1.8568043809357439589;6.232842995261373531 -5.7617472767058330874;2.5228478315804281351 1.3628353199781357841;35.89061431167530003 9.1523517230536395317;2.4529718842058643169 -6.7562553418326265486;3.4062217633874753986 -26.65840609635907299;-9.5715667688567886984 6.8020637337457978688;-10.652359240466841683 1.2531589233602560274;6.8852825898198597443 -11.411852936454540242;13.289273378177423268 -7.7902833498235279919;7.425342401431112016 1.1794641507115966039;4.2037904992012746774 -10.487630939755645088;-1.8655596467781407899 -22.592994461572885712;7.875337673331433308 -5.1996172818746000388;-8.8156667586991019903 1.7759046042692392398;-10.287519660789399722 -6.1729003269558422318;-29.592031475978377131 2.9400771884353718022;-7.4932080329564314525 -5.3698898977322819803;5.5029811654338383065 -5.0204284179877438632;0.46123241912929263675 3.0573192999959291072];

% Layer 2
b2 = [0.49480460069001097612;0.44032195524974104828;-2.8895360195930361868];
LW2_1 = [-1.957985618467189104 0.47459663756035314064 -0.93673448458700470098 0.87945135688142839214 -0.61258114060905799469 0.22864317981342313635 2.1785864534188492669 -2.776908758851404091 4.8959582038107107849 3.8807031278968482368 7.2954859933734512722 0.98022001144181680754 -3.9623781245572620158 0.063279500744251482303 1.7380353870098099733 -0.23260457329008282779 -0.33874040959761925196 -0.088176703577746887164 0.37639953063604819627 0.066413471838887253029 -0.5785523158305647673 1.2231908776849285125 0.53433432684608705987 -0.17407433720184864456 0.21940840879413936459 -0.10050632676539035526 0.014823584496486533202 -0.046074511825042956115 0.34267520016296770802 4.7951791743663880752;-0.3000879224075276297 1.2989603052542026962 -2.3695592467650592461 -7.351296655046013484 0.0050696858073729202457 0.016073181870736755888 1.1221801246313740652 1.5552899207236283718 -0.18027731812239261577 -0.037793395741807553345 -2.129985918822397295 0.017742398635633181009 -0.01333640466300098186 -0.013601843400147263161 -0.11587837334406385359 0.023897865746074581361 -1.3314182900501283502 -2.1015543182435045821 2.750616889501146467 -1.0101911469957440826 -2.604713696279866042 -4.1699789494712886651 0.073400466865942454175 3.1686399093579513675 3.3324919706296789457 -1.7679452293714488231 0.8820492446209720061 3.3048028322912785804 1.6883797606691957061 0.62950109714399093974;-0.13167051603080981437 -0.10932236080995812177 0.13565529774529286322 0.09539543568544900376 0.035607751917306688927 -0.03365332370798884698 -0.15133673759728905051 1.2277536846871999199 -0.045968955427693948546 -0.012770729154819981249 0.019040560767223674993 -0.084650136621859911612 0.082279927700870239549 -0.010133194999829989516 -0.25454508750930521233 0.042516623540523573732 -1.1764793774364294965 -1.9723537052160635685 -4.3064877396802092591 -0.94603998680330958493 -2.2843893351380182288 2.8878376412602180245 -0.014606400818704744909 8.4479954757765707285 -5.0171729229277524098 3.0672062133424771169 0.35908873039919037007 6.0820214921376347661 -0.38033658444742435289 0.97007361152800797299];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = [0.271388832349549;0.317100433634843;0.313456040924821];
y1_step1.xoffset = [-3.72296;-3.18865;-3.14955];

% ===== SIMULATION ========

% Format Input Arguments
isCellX = iscell(X);
if ~isCellX
    X = {X};
end

% Dimensions
TS = size(X,2); % timesteps
if ~isempty(X)
    Q = size(X{1},2); % samples/series
else
    Q = 0;
end

% Allocate Outputs
Y = cell(1,TS);

% Time loop
for ts=1:TS
    
    % Input 1
    Xp1 = mapminmax_apply(X{1,ts},x1_step1);
    
    % Layer 1
    a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*Xp1);
    
    % Layer 2
    a2 = repmat(b2,1,Q) + LW2_1*a1;
    
    % Output 1
    Y{1,ts} = mapminmax_reverse(a2,y1_step1);
end

% Final Delay States
Xf = cell(1,0);
Af = cell(2,0);

% Format Output Arguments
if ~isCellX
    Y = cell2mat(Y);
end
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
y = bsxfun(@minus,x,settings.xoffset);
y = bsxfun(@times,y,settings.gain);
y = bsxfun(@plus,y,settings.ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
x = bsxfun(@minus,y,settings.ymin);
x = bsxfun(@rdivide,x,settings.gain);
x = bsxfun(@plus,x,settings.xoffset);
end
