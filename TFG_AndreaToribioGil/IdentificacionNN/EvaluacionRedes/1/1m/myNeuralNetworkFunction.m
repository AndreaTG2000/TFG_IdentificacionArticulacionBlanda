function [Y,Xf,Af] = myNeuralNetworkFunction(X,~,~)
%MYNEURALNETWORKFUNCTION neural network simulation function.
%
% Auto-generated by MATLAB, 06-Jun-2022 23:12:20.
%
% [Y] = myNeuralNetworkFunction(X,~,~) takes these arguments:
%
%   X = 1xTS cell, 1 inputs over TS timesteps
%   Each X{1,ts} = 3xQ matrix, input #1 at timestep ts.
%
% and returns:
%   Y = 1xTS cell of 1 outputs over TS timesteps.
%   Each Y{1,ts} = 1xQ matrix, output #1 at timestep ts.
%
% where Q is number of samples (or series) and TS is the number of timesteps.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = [-3.82866;-5.29313;-5.14052];
x1_step1.gain = [0.258315165166717;0.192781118246155;0.19304218068169];
x1_step1.ymin = -1;

% Layer 1
b1 = [2.5755215652431826534;-2.0730819018289965427;-1.7498450532223903675;-0.68972556820946384626;0.54622615054954626324;1.245417215893163787;1.3295070862589586369;-2.18972226714541085;1.9354415784714131821;-3.1917244452355841844];
IW1_1 = [-0.61768806625891092832 2.2034881800688852493 2.0865230834228931656;2.1048027212177902179 1.6438194902401142006 1.5834072262815046539;1.7777856821257422837 2.2815337054768294323 0.58008842997058329694;1.2515735450848550769 -1.8818134885257395972 0.41999634982666045335;-1.8200822963699836432 -2.028743471584654845 0.71563174351975145093;1.9433114066217895832 -0.39512634946896463273 -0.045624678867283191552;-0.036669205419335902663 -2.385124303202047269 0.6775797694415052197;-1.7125147780014997601 0.49493990282210920117 -1.9879615739924609841;0.70643262734426770511 -1.8069908579681570604 2.168332896118568609;-1.6691254602345206859 -2.1829164330854662346 -1.0272038556333773496];

% Layer 2
b2 = -0.56784641492635701265;
LW2_1 = [-0.49463394073009314678 -0.61248781454099010535 -0.10484464159270923123 0.24730263684515396694 -0.20423165154333169924 0.58421778578624516953 0.050652200561944402124 -0.11036165104720140062 -0.20151202527864606195 -0.27647728597572684972];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = 0.0234961498084224;
y1_step1.xoffset = -46.5611006211289;

% ===== SIMULATION ========

% Format Input Arguments
isCellX = iscell(X);
if ~isCellX
    X = {X};
end

% Dimensions
TS = size(X,2); % timesteps
if ~isempty(X)
    Q = size(X{1},2); % samples/series
else
    Q = 0;
end

% Allocate Outputs
Y = cell(1,TS);

% Time loop
for ts=1:TS
    
    % Input 1
    Xp1 = mapminmax_apply(X{1,ts},x1_step1);
    
    % Layer 1
    a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*Xp1);
    
    % Layer 2
    a2 = repmat(b2,1,Q) + LW2_1*a1;
    
    % Output 1
    Y{1,ts} = mapminmax_reverse(a2,y1_step1);
end

% Final Delay States
Xf = cell(1,0);
Af = cell(2,0);

% Format Output Arguments
if ~isCellX
    Y = cell2mat(Y);
end
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
y = bsxfun(@minus,x,settings.xoffset);
y = bsxfun(@times,y,settings.gain);
y = bsxfun(@plus,y,settings.ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
x = bsxfun(@minus,y,settings.ymin);
x = bsxfun(@rdivide,x,settings.gain);
x = bsxfun(@plus,x,settings.xoffset);
end
