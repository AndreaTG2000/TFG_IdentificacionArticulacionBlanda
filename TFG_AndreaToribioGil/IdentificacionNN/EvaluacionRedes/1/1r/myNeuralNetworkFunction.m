function [Y,Xf,Af] = myNeuralNetworkFunction(X,~,~)
%MYNEURALNETWORKFUNCTION neural network simulation function.
%
% Auto-generated by MATLAB, 06-Jun-2022 23:49:21.
%
% [Y] = myNeuralNetworkFunction(X,~,~) takes these arguments:
%
%   X = 1xTS cell, 1 inputs over TS timesteps
%   Each X{1,ts} = 3xQ matrix, input #1 at timestep ts.
%
% and returns:
%   Y = 1xTS cell of 1 outputs over TS timesteps.
%   Each Y{1,ts} = 1xQ matrix, output #1 at timestep ts.
%
% where Q is number of samples (or series) and TS is the number of timesteps.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = [-3.82866;-5.29313;-5.14052];
x1_step1.gain = [0.258315165166717;0.192781118246155;0.19304218068169];
x1_step1.ymin = -1;

% Layer 1
b1 = [-4.34558104700607295;-3.9712136630347818489;-3.8157108982551091181;3.4362753169832904732;3.1615487735841338868;2.9575970837487313148;2.5143085823052300221;2.2882807177468009741;-2.0088812491941503424;-1.4078903533393631875;-1.2623422290419841207;0.71095388568481054925;-0.86112243506811636529;-0.73405189357116329418;-0.045425029819104387196;-0.29219310519600810716;0.050972598570940982898;-0.28744038387470466356;-1.1628227127842791777;1.5402240570052754265;-2.0302939232068246689;-1.3280215172107976418;2.506869196338969541;-2.691651233681803923;2.7436026224733098822;3.233560676599891881;-3.661731127679226816;3.7320067076957585961;-4.144247714804649263;4.4990199155330570235];
IW1_1 = [2.4286496436416933342 2.4687367375234305911 2.6340169184869068886;0.55759509972196830141 -3.8412015445073750541 2.1030044095265210125;2.7165671775585806813 3.2368573154131352609 0.73420196791069980424;-3.2932278517356086134 2.6950438995599022007 -0.018142226592560185827;-1.2668987900324262252 -2.6762495030367734472 -3.1811081479822425067;-0.60608039613611830454 -2.4026939753563678615 3.4494680246983806526;-1.4213770288382243656 -4.0966094029001638432 -0.49544264897170603446;-1.7455640526060549611 -2.7356466504688841113 2.8098006350197071157;1.9557110840037679189 -3.7574286301955424072 -0.56925783600401003159;1.147085481875558699 3.1010939292014301216 -2.8835225621750217861;0.27185446037480559545 -4.0244014279522124511 -1.6066866624837334854;-4.1828886804909508612 0.96748569712348619909 0.45475712947329477442;0.55002719544132505636 -2.4730393504688388262 -3.4839785581773856649;1.1489909282204486818 3.2688683955469852727 2.4671872366536082843;-2.5290873252880858857 2.6721065183539680632 -2.1933218970886709798;-1.3729063787917852313 -3.469780327171851031 2.2269707301001306909;2.6671750525079458427 -1.9814931144207805769 2.5441121507496458065;-1.1389097687465414843 -2.7382780170142679843 3.0529300294563057605;-0.43559109949179214416 0.79843019872724541042 4.2353765103511280543;1.8966084076469278408 3.767806624923633052 0.29211504430616708206;-0.45795342545948369839 -3.4905957307952784063 -1.9315650219845823532;-3.9748927129767257505 -1.0697292690363675582 -0.82927667326966569838;3.3921349561006488571 2.2785825316772512217 0.40376821805829188339;-2.4289506681023373957 1.6822954422698213062 -3.0461850776257843876;1.5406243942640371891 -2.736534762793385589 2.6933150356797392888;3.2259337930437173014 1.5205620173839635711 2.3443607946723630242;-1.8450455735887791864 -3.167938911377210065 1.9193080759955263304;1.8812797308637032589 3.9076258769592637776 0.16621678541275233809;-2.7347081647974436081 -3.2238531963664192048 -0.0081581449220981885895;3.4256006457330645532 -2.0568306159141274136 -0.60551252997293603109];

% Layer 2
b2 = -0.58824457669445939789;
LW2_1 = [0.88231500412442576131 -0.089267693825577143496 -0.26064324831433743901 0.025225324148345770053 0.24183903202515666386 -0.08237456262640557858 -0.13862737869243640931 0.0075433974896564684465 -0.044272851312871910889 0.11041457903670368057 0.23705611968399542544 0.049652693088755729678 -0.0024465352895824518838 -0.30191194856037184557 -0.056121991115336208877 0.098359183642945741122 0.055471192108615431648 -0.24415365729864374478 0.15090341529102030416 0.13792619291212029897 0.49501018067473356865 -0.26623257005276662612 0.17607484853819346804 -0.27608250166681480575 -0.22154826250568085411 0.36563305216891489602 0.26087047405332142169 0.58889582231618275987 -0.40766000632702104056 0.11595315642980021098];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = 0.0234961498084224;
y1_step1.xoffset = -46.5611006211289;

% ===== SIMULATION ========

% Format Input Arguments
isCellX = iscell(X);
if ~isCellX
    X = {X};
end

% Dimensions
TS = size(X,2); % timesteps
if ~isempty(X)
    Q = size(X{1},2); % samples/series
else
    Q = 0;
end

% Allocate Outputs
Y = cell(1,TS);

% Time loop
for ts=1:TS
    
    % Input 1
    Xp1 = mapminmax_apply(X{1,ts},x1_step1);
    
    % Layer 1
    a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*Xp1);
    
    % Layer 2
    a2 = repmat(b2,1,Q) + LW2_1*a1;
    
    % Output 1
    Y{1,ts} = mapminmax_reverse(a2,y1_step1);
end

% Final Delay States
Xf = cell(1,0);
Af = cell(2,0);

% Format Output Arguments
if ~isCellX
    Y = cell2mat(Y);
end
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
y = bsxfun(@minus,x,settings.xoffset);
y = bsxfun(@times,y,settings.gain);
y = bsxfun(@plus,y,settings.ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
x = bsxfun(@minus,y,settings.ymin);
x = bsxfun(@rdivide,x,settings.gain);
x = bsxfun(@plus,x,settings.xoffset);
end
