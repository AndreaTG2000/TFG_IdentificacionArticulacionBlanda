function [Y,Xf,Af] = myNeuralNetworkFunction(X,~,~)
%MYNEURALNETWORKFUNCTION neural network simulation function.
%
% Auto-generated by MATLAB, 06-Jun-2022 21:34:26.
%
% [Y] = myNeuralNetworkFunction(X,~,~) takes these arguments:
%
%   X = 1xTS cell, 1 inputs over TS timesteps
%   Each X{1,ts} = 3xQ matrix, input #1 at timestep ts.
%
% and returns:
%   Y = 1xTS cell of 1 outputs over TS timesteps.
%   Each Y{1,ts} = 1xQ matrix, output #1 at timestep ts.
%
% where Q is number of samples (or series) and TS is the number of timesteps.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = [-3.82866;-5.29313;-5.14052];
x1_step1.gain = [0.258315165166717;0.192781118246155;0.19304218068169];
x1_step1.ymin = -1;

% Layer 1
b1 = [0.016931793703277579072;-1.5198568618646548511;3.2965385458836315991;-0.93596294081977537971;-1.4510177691040893055;0.084711338484203674293;-0.52485122119247962225;1.336245273997787697;-0.050025745161335469224;0.88447690112535215512];
IW1_1 = [0.085178505808470014737 -4.7719317763787145736 -1.9090037198144138575;0.16878083643471197828 -0.92341951072194727868 -2.4947257497841981433;-12.78744772160259302 26.329973761896553697 13.945237097998393949;0.33998012900260660141 -2.2671181989284225899 0.38980240391727288829;-6.3362227527318815135 -1.5722340009843824848 -1.7788321801388058407;0.42967028043475685717 1.4936252100018223565 4.4641100828866369099;-0.89038373240059720537 1.3710456397863075573 4.1308354245135632254;2.2358282007116172529 0.45799652613600100315 0.25782995335493136269;-0.2686188624872316022 4.2989703378551853419 1.7078971891522145565;-0.27873302583769499208 2.2212346162303551189 -0.28863831880668028296];

% Layer 2
b2 = 0.20106030805172772635;
LW2_1 = [1.2439412236344442597 0.33534753394067401411 -0.01871337439271830369 -3.6071706097646534239 -0.12717530624725131849 -0.26887925867620937614 0.13071779608157299557 0.57784889423749474791 1.3874582625544331638 -4.0818031339892737464];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = 0.0234961498084224;
y1_step1.xoffset = -46.5611006211289;

% ===== SIMULATION ========

% Format Input Arguments
isCellX = iscell(X);
if ~isCellX
    X = {X};
end

% Dimensions
TS = size(X,2); % timesteps
if ~isempty(X)
    Q = size(X{1},2); % samples/series
else
    Q = 0;
end

% Allocate Outputs
Y = cell(1,TS);

% Time loop
for ts=1:TS
    
    % Input 1
    Xp1 = mapminmax_apply(X{1,ts},x1_step1);
    
    % Layer 1
    a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*Xp1);
    
    % Layer 2
    a2 = repmat(b2,1,Q) + LW2_1*a1;
    
    % Output 1
    Y{1,ts} = mapminmax_reverse(a2,y1_step1);
end

% Final Delay States
Xf = cell(1,0);
Af = cell(2,0);

% Format Output Arguments
if ~isCellX
    Y = cell2mat(Y);
end
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
y = bsxfun(@minus,x,settings.xoffset);
y = bsxfun(@times,y,settings.gain);
y = bsxfun(@plus,y,settings.ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
x = bsxfun(@minus,y,settings.ymin);
x = bsxfun(@rdivide,x,settings.gain);
x = bsxfun(@plus,x,settings.xoffset);
end
