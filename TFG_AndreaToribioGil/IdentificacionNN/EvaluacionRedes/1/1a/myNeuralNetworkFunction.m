function [Y,Xf,Af] = myNeuralNetworkFunction(X,~,~)
%MYNEURALNETWORKFUNCTION neural network simulation function.
%
% Auto-generated by MATLAB, 23-May-2022 12:45:11.
%
% [Y] = myNeuralNetworkFunction(X,~,~) takes these arguments:
%
%   X = 1xTS cell, 1 inputs over TS timesteps
%   Each X{1,ts} = 3xQ matrix, input #1 at timestep ts.
%
% and returns:
%   Y = 1xTS cell of 1 outputs over TS timesteps.
%   Each Y{1,ts} = 1xQ matrix, output #1 at timestep ts.
%
% where Q is number of samples (or series) and TS is the number of timesteps.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = [-3.82866;-5.29313;-5.14052];
x1_step1.gain = [0.258315165166717;0.192781118246155;0.19304218068169];
x1_step1.ymin = -1;

% Layer 1
b1 = [-6.5186019856446861809;-0.87679193413381528721;-0.74977551947247411679;-1.7628547970821497604;0.30537856427385945413;0.35504141726791882405;0.064481992026232476389;0.029704093494281984256;1.79690472303238713;1.8763805855115849308];
IW1_1 = [-0.32512669175420166878 -9.806391887041263189 -7.8733942572135422466;0.0025465579502834123637 -0.28037380995107841208 -1.7339860834808575873;-0.52013501203054068878 5.0322588774812260226 1.9873293528799029772;0.10634218926117468274 -3.7605388725143504836 -1.2648830122928842457;1.9022811677547346587 -1.4669952717007110898 -3.71765697106032178;1.3226869159214096339 4.3939613327344000382 9.1248332085053736051;0.16133823934905891506 0.27925306757554441139 5.4907947465413915467;0.79524722635652222991 5.2461743661738795552 1.853729539503411905;3.9645990499312269151 0.89133038957639454392 0.957912485199754693;4.1381794713891491 0.94542838100964121661 1.0055277548695333856];

% Layer 2
b2 = 0.2544270870228540482;
LW2_1 = [0.053044869183136125756 0.41427316707627653836 0.117983191870803375 0.20602719771119101799 -0.11912161108103384854 -0.063424596668477051242 -0.062711445918368288743 -0.24433633844417340653 7.4110248246326193566 -6.7814886540333256804];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = 0.0234961498084224;
y1_step1.xoffset = -46.5611006211289;

% ===== SIMULATION ========

% Format Input Arguments
isCellX = iscell(X);
if ~isCellX
    X = {X};
end

% Dimensions
TS = size(X,2); % timesteps
if ~isempty(X)
    Q = size(X{1},2); % samples/series
else
    Q = 0;
end

% Allocate Outputs
Y = cell(1,TS);

% Time loop
for ts=1:TS
    
    % Input 1
    Xp1 = mapminmax_apply(X{1,ts},x1_step1);
    
    % Layer 1
    a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*Xp1);
    
    % Layer 2
    a2 = repmat(b2,1,Q) + LW2_1*a1;
    
    % Output 1
    Y{1,ts} = mapminmax_reverse(a2,y1_step1);
end

% Final Delay States
Xf = cell(1,0);
Af = cell(2,0);

% Format Output Arguments
if ~isCellX
    Y = cell2mat(Y);
end
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
y = bsxfun(@minus,x,settings.xoffset);
y = bsxfun(@times,y,settings.gain);
y = bsxfun(@plus,y,settings.ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
x = bsxfun(@minus,y,settings.ymin);
x = bsxfun(@rdivide,x,settings.gain);
x = bsxfun(@plus,x,settings.xoffset);
end
