function [Y,Xf,Af] = myNeuralNetworkFunction(X,~,~)
%MYNEURALNETWORKFUNCTION neural network simulation function.
%
% Auto-generated by MATLAB, 01-May-2022 20:11:34.
%
% [Y] = myNeuralNetworkFunction(X,~,~) takes these arguments:
%
%   X = 1xTS cell, 1 inputs over TS timesteps
%   Each X{1,ts} = 2xQ matrix, input #1 at timestep ts.
%
% and returns:
%   Y = 1xTS cell of 1 outputs over TS timesteps.
%   Each Y{1,ts} = 3xQ matrix, output #1 at timestep ts.
%
% where Q is number of samples (or series) and TS is the number of timesteps.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = [-46.5611006211289;-59.2985011470014];
x1_step1.gain = [0.0234961498084224;0.0158180999187882];
x1_step1.ymin = -1;

% Layer 1
b1 = [-6.0162761251411494001;6.3439515741962662077;-5.9435135521060526997;-2.8148220770575247407;-6.351082612306377051;7.5353389862762965024;2.3632037297104910856;-2.1576857912043463372;-3.1965848426536735971;2.2140088589540263264;-2.2882372493550158232;-2.322176705959748233;-8.4885955851088361612;-2.119668108857441613;-0.035613073775110241914;-15.396536449973527994;2.0076974094671919957;6.0379277678118778994;-2.5332774364035088865;11.241994394456410689;-2.6384732837448456877;2.6405084243600578375;-6.6587194469050583479;-18.818022414929053809;-6.2255834249024433191;-19.212063880510271474;-2.7738615516777489489;14.74166825770557665;-17.183599450513337814;-16.209763670121095203];
IW1_1 = [1.4128487021306763705 6.2155176805412049035;-6.6667134679209123505 -3.1987730488619918745;0.76928272943678022155 6.6119710095460941801;5.0997147851492652393 0.25614513940501637546;6.6660142796876895588 3.315177768423887894;-8.3164966753313294134 6.2982767823282426178;-4.2810881961032638543 0.19373695378978808557;3.9331338372739486076 -0.82031029320962678408;5.8146335375648918742 0.54458826226574219564;-4.0290801623643455187 1.3489647377746831758;63.304225007946051562 -37.824636165941612376;3.8935362957334080924 2.999193846017049303;72.343541888207738566 30.263750892654151414;62.100907899410685786 -37.018418401600015955;-0.024758547951297116274 0.11321830891442508094;-216.23924491749031063 -147.27933135073377002;-62.648799236652664035 37.265687043593523242;7.5858198016826783316 -30.9029120451742223;-2.6667244034593862168 7.9807639234606435608;29.311583309322916335 10.623152028693390037;-2.7354941976567048734 8.2717073216521281864;3.0581004766401869155 3.6264067192642279736;-10.182986014484523452 -1.0448357728098516262;-16.491178149241882522 -29.161689255012831268;0.17217006386271116458 7.4050212641684067805;-16.890212811625733735 -29.764380101137337675;-3.2497423287265458924 -3.7797176040589639534;17.3860878713775584 -16.293552241076032061;-19.84078161335537871 20.239482308581671077;-18.825189855724730137 18.770001562070664392];

% Layer 2
b2 = [-0.30279405196463687888;0.058816861691432423265;0.13812093909856595908];
LW2_1 = [11.591802632290981734 7.7791038756838410961 -19.442131142614897499 -24.185769752405558819 7.6778237610763735432 -0.041876182624604879612 -24.425520486051379265 -14.756183913541667252 9.8999415965635630954 -4.9635278164508234156 -8.8599701606731677828 0.20028823449936181134 0.032877677069993407888 17.246876934963299988 -3.1867183983035158867 -0.076066829211473938055 8.3468177810900954228 0.00034287124122145136006 -1.0783937731599382293 0.029193000569904092867 0.99001158681783851812 4.2770692911029906114 -0.052261641949443167487 -0.1754428128914483076 7.8620280598166267794 0.1740456877026553828 3.9417434523492884679 0.36120075615679331227 -0.96779636511137923094 1.3028124195071224545;-4.2635128117581571061 -1.6432660472838089838 8.3244548896937224924 5.7911471225411430552 -1.6409491815936674275 -0.0092564286916773565878 5.5636295132181388112 2.808623063492828198 -2.4119651759261735435 0.77466558089101600348 0.64077890187898556285 -0.092468842045523177986 -0.022987949322197637203 -1.3375196089921224107 -3.2952498564764973743 0.051569982256509779017 -0.6919996580814675724 -0.051079918386636509464 -4.5745236601193761672 -0.0042465333070134106061 4.4147514354368864176 -4.3529375672163803657 0.0045039729726766512125 -2.6317234026513318668 -3.9399605040553784541 2.6095789151547474916 -3.9907317203513086312 -1.7931596500060202892 4.1156596960330791291 -5.916716859235311432;-3.2656147256585152938 -3.6259131467029104279 4.3072706149236275053 10.873500051951918266 -3.5700820516115263636 0.043607128410811005215 11.47166222901159216 7.5601564502733866746 -4.3542224892097713962 2.715155648356610385 5.4573357565688729309 -0.052165578159524980673 -0.0040001521068956363142 -10.645751790933340786 5.6362911749566491082 0.0043191752504740457685 -5.1614623807870900762 0.053005839746276164903 5.1479643856842089988 -0.022877305233517504501 -4.9243824246368612663 1.3918136713435873553 0.036195281639355980641 2.8257184066548091117 -1.1741343604003660062 -2.8048081581547412711 1.2667328166178737359 1.246586116193212801 -2.9190860607253497072 4.1904854166226179757];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = [0.258315165166717;0.192781118246155;0.19304218068169];
y1_step1.xoffset = [-3.82866;-5.29313;-5.14052];

% ===== SIMULATION ========

% Format Input Arguments
isCellX = iscell(X);
if ~isCellX
    X = {X};
end

% Dimensions
TS = size(X,2); % timesteps
if ~isempty(X)
    Q = size(X{1},2); % samples/series
else
    Q = 0;
end

% Allocate Outputs
Y = cell(1,TS);

% Time loop
for ts=1:TS
    
    % Input 1
    Xp1 = mapminmax_apply(X{1,ts},x1_step1);
    
    % Layer 1
    a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*Xp1);
    
    % Layer 2
    a2 = repmat(b2,1,Q) + LW2_1*a1;
    
    % Output 1
    Y{1,ts} = mapminmax_reverse(a2,y1_step1);
end

% Final Delay States
Xf = cell(1,0);
Af = cell(2,0);

% Format Output Arguments
if ~isCellX
    Y = cell2mat(Y);
end
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
y = bsxfun(@minus,x,settings.xoffset);
y = bsxfun(@times,y,settings.gain);
y = bsxfun(@plus,y,settings.ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
x = bsxfun(@minus,y,settings.ymin);
x = bsxfun(@rdivide,x,settings.gain);
x = bsxfun(@plus,x,settings.xoffset);
end
